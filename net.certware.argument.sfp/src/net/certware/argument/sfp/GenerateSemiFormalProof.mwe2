module net.certware.argument.sfp.SemiFormalProof

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var file.extensions = "sfp"
var projectName = "net.certware.argument.sfp"
var grammarURI = "platform:/resource/${projectName}/src/net/certware/argument/sfp/SemiFormalProof.xtext"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
    // use an XtextResourceset throughout the process, which is able to resolve classpath:/ URIs.
       resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
       
       // add mappings from platform:/resource to classpath:/
       uriMap = {
       	      from = "platform:/resource/org.eclipse.xtext.xbase/"
    	   to = "classpath:/"
    	   }
    	 uriMap = {
    	   	  from = "platform:/resource/org.eclipse.xtext.common.types/"
    		       to = "classpath:/"
    		       }

	// register current project and its siblings for platform URI map, not on classpath
	platformUri = "${runtimeProject}/.."
	// registerGenModelFile = "${runtimeProject}/model/generated/SemiFormalProof.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
	
		language = auto-inject {
			 forcedResourceSet = theResourceSet

			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			fragment = ecore.EMFGeneratorFragment auto-inject {
				 javaModelDirectory = "/${projectName}/src-gen"
			}

			// the serialization component
			fragment = serializer.SerializerFragment auto-inject {
				 generateStub = false
			}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			//  options = {
			//		backtrack = true
			//	}
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// registerForImportedPackages = true
			}



			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment auto-inject {}

			fragment = generator.GeneratorFragment auto-inject {}

			// formatter API 
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API 
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}
			
			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}

			// generates junit test support classes into Generator#pathTestProject
			// fragment = junit.Junit4Fragment auto-inject {}
    
			// rename refactoring
    			// fragment = refactoring.RefactorElementNameFragment auto-inject {}
    
			// provides the necessary bindings for java types integration
    			fragment = types.TypesGeneratorFragment auto-inject {}
    
			// generates the required bindings only if the grammar inherits from Xbase
    			// fragment = xbase.XbaseGeneratorFragment auto-inject {}
    
			// provides a preference page for template proposals
    			// fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
    
			// provides a compare view
    			// fragment = compare.CompareFragment auto-inject {}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }

		}
	}
}
