/**
 */
package stateAnalysis.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import stateAnalysis.util.StateAnalysisAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StateAnalysisItemProviderAdapterFactory extends StateAnalysisAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateAnalysisItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.System} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SystemItemProvider systemItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.System}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSystemAdapter()
  {
    if (systemItemProvider == null)
    {
      systemItemProvider = new SystemItemProvider(this);
    }

    return systemItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.Subsystem} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubsystemItemProvider subsystemItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.Subsystem}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSubsystemAdapter()
  {
    if (subsystemItemProvider == null)
    {
      subsystemItemProvider = new SubsystemItemProvider(this);
    }

    return subsystemItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.DeploymentSet} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentSetItemProvider deploymentSetItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.DeploymentSet}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeploymentSetAdapter()
  {
    if (deploymentSetItemProvider == null)
    {
      deploymentSetItemProvider = new DeploymentSetItemProvider(this);
    }

    return deploymentSetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.QosPolicy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QosPolicyItemProvider qosPolicyItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.QosPolicy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQosPolicyAdapter()
  {
    if (qosPolicyItemProvider == null)
    {
      qosPolicyItemProvider = new QosPolicyItemProvider(this);
    }

    return qosPolicyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.DataProduct} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataProductItemProvider dataProductItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.DataProduct}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDataProductAdapter()
  {
    if (dataProductItemProvider == null)
    {
      dataProductItemProvider = new DataProductItemProvider(this);
    }

    return dataProductItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.DataCollection} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataCollectionItemProvider dataCollectionItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.DataCollection}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDataCollectionAdapter()
  {
    if (dataCollectionItemProvider == null)
    {
      dataCollectionItemProvider = new DataCollectionItemProvider(this);
    }

    return dataCollectionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.Deployment} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentItemProvider deploymentItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.Deployment}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeploymentAdapter()
  {
    if (deploymentItemProvider == null)
    {
      deploymentItemProvider = new DeploymentItemProvider(this);
    }

    return deploymentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.StateVariable} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateVariableItemProvider stateVariableItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.StateVariable}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStateVariableAdapter()
  {
    if (stateVariableItemProvider == null)
    {
      stateVariableItemProvider = new StateVariableItemProvider(this);
    }

    return stateVariableItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.Controller} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControllerItemProvider controllerItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.Controller}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createControllerAdapter()
  {
    if (controllerItemProvider == null)
    {
      controllerItemProvider = new ControllerItemProvider(this);
    }

    return controllerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.Estimator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EstimatorItemProvider estimatorItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.Estimator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEstimatorAdapter()
  {
    if (estimatorItemProvider == null)
    {
      estimatorItemProvider = new EstimatorItemProvider(this);
    }

    return estimatorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.StateConstraint} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateConstraintItemProvider stateConstraintItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.StateConstraint}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStateConstraintAdapter()
  {
    if (stateConstraintItemProvider == null)
    {
      stateConstraintItemProvider = new StateConstraintItemProvider(this);
    }

    return stateConstraintItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.StateUpdate} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateUpdateItemProvider stateUpdateItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.StateUpdate}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStateUpdateAdapter()
  {
    if (stateUpdateItemProvider == null)
    {
      stateUpdateItemProvider = new StateUpdateItemProvider(this);
    }

    return stateUpdateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.HardwareCommand} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HardwareCommandItemProvider hardwareCommandItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.HardwareCommand}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHardwareCommandAdapter()
  {
    if (hardwareCommandItemProvider == null)
    {
      hardwareCommandItemProvider = new HardwareCommandItemProvider(this);
    }

    return hardwareCommandItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.HardwareMeasurement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HardwareMeasurementItemProvider hardwareMeasurementItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.HardwareMeasurement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHardwareMeasurementAdapter()
  {
    if (hardwareMeasurementItemProvider == null)
    {
      hardwareMeasurementItemProvider = new HardwareMeasurementItemProvider(this);
    }

    return hardwareMeasurementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.Device} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceItemProvider deviceItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.Device}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeviceAdapter()
  {
    if (deviceItemProvider == null)
    {
      deviceItemProvider = new DeviceItemProvider(this);
    }

    return deviceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.DeviceCommand} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceCommandItemProvider deviceCommandItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.DeviceCommand}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeviceCommandAdapter()
  {
    if (deviceCommandItemProvider == null)
    {
      deviceCommandItemProvider = new DeviceCommandItemProvider(this);
    }

    return deviceCommandItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.DeviceMeasurement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceMeasurementItemProvider deviceMeasurementItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.DeviceMeasurement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeviceMeasurementAdapter()
  {
    if (deviceMeasurementItemProvider == null)
    {
      deviceMeasurementItemProvider = new DeviceMeasurementItemProvider(this);
    }

    return deviceMeasurementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link stateAnalysis.HardwareAdapter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HardwareAdapterItemProvider hardwareAdapterItemProvider;

  /**
   * This creates an adapter for a {@link stateAnalysis.HardwareAdapter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHardwareAdapterAdapter()
  {
    if (hardwareAdapterItemProvider == null)
    {
      hardwareAdapterItemProvider = new HardwareAdapterItemProvider(this);
    }

    return hardwareAdapterItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (systemItemProvider != null) systemItemProvider.dispose();
    if (subsystemItemProvider != null) subsystemItemProvider.dispose();
    if (deploymentSetItemProvider != null) deploymentSetItemProvider.dispose();
    if (deploymentItemProvider != null) deploymentItemProvider.dispose();
    if (dataCollectionItemProvider != null) dataCollectionItemProvider.dispose();
    if (qosPolicyItemProvider != null) qosPolicyItemProvider.dispose();
    if (dataProductItemProvider != null) dataProductItemProvider.dispose();
    if (stateVariableItemProvider != null) stateVariableItemProvider.dispose();
    if (controllerItemProvider != null) controllerItemProvider.dispose();
    if (estimatorItemProvider != null) estimatorItemProvider.dispose();
    if (hardwareAdapterItemProvider != null) hardwareAdapterItemProvider.dispose();
    if (deviceItemProvider != null) deviceItemProvider.dispose();
    if (stateConstraintItemProvider != null) stateConstraintItemProvider.dispose();
    if (stateUpdateItemProvider != null) stateUpdateItemProvider.dispose();
    if (hardwareCommandItemProvider != null) hardwareCommandItemProvider.dispose();
    if (hardwareMeasurementItemProvider != null) hardwareMeasurementItemProvider.dispose();
    if (deviceCommandItemProvider != null) deviceCommandItemProvider.dispose();
    if (deviceMeasurementItemProvider != null) deviceMeasurementItemProvider.dispose();
  }

}
