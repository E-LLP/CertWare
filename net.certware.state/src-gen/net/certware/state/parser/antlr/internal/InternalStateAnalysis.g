/*
* generated by Xtext
*/
grammar InternalStateAnalysis;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.certware.state.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.state.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.certware.state.services.StateAnalysisGrammarAccess;

}

@parser::members {

 	private StateAnalysisGrammarAccess grammarAccess;
 	
    public InternalStateAnalysisParser(TokenStream input, StateAnalysisGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "System";	
   	}
   	
   	@Override
   	protected StateAnalysisGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getSubsystemsSubsystemParserRuleCall_0()); 
	    }
		lv_subsystems_0_0=ruleSubsystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"subsystems",
        		lv_subsystems_0_0, 
        		"Subsystem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleSubsystem
entryRuleSubsystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubsystemRule()); }
	 iv_ruleSubsystem=ruleSubsystem 
	 { $current=$iv_ruleSubsystem.current; } 
	 EOF 
;

// Rule Subsystem
ruleSubsystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Subsystem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubsystemAccess().getSubsystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSubsystemAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubsystemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubsystemAccess().getDeploymentSetsDeploymentSetParserRuleCall_2_0()); 
	    }
		lv_deploymentSets_2_0=ruleDeploymentSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubsystemRule());
	        }
       		add(
       			$current, 
       			"deploymentSets",
        		lv_deploymentSets_2_0, 
        		"DeploymentSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDeploymentSet
entryRuleDeploymentSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeploymentSetRule()); }
	 iv_ruleDeploymentSet=ruleDeploymentSet 
	 { $current=$iv_ruleDeploymentSet.current; } 
	 EOF 
;

// Rule DeploymentSet
ruleDeploymentSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDeploymentSetAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeploymentSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeploymentSetAccess().getDeploymentsDeploymentParserRuleCall_1_0()); 
	    }
		lv_deployments_1_0=ruleDeployment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeploymentSetRule());
	        }
       		add(
       			$current, 
       			"deployments",
        		lv_deployments_1_0, 
        		"Deployment");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDeployment
entryRuleDeployment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeploymentRule()); }
	 iv_ruleDeployment=ruleDeployment 
	 { $current=$iv_ruleDeployment.current; } 
	 EOF 
;

// Rule Deployment
ruleDeployment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDeploymentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeploymentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeploymentAccess().getComponentsComponentParserRuleCall_1_0()); 
	    }
		lv_components_1_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeploymentRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_1_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getSvStateVariableParserRuleCall_1_0()); 
	    }
		lv_sv_1_0=ruleStateVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"sv",
        		lv_sv_1_0, 
        		"StateVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getControllerControllerParserRuleCall_2_0()); 
	    }
		lv_controller_2_0=ruleController		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"controller",
        		lv_controller_2_0, 
        		"Controller");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getEstimatorEstimatorParserRuleCall_3_0()); 
	    }
		lv_estimator_3_0=ruleEstimator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"estimator",
        		lv_estimator_3_0, 
        		"Estimator");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleStateVariable
entryRuleStateVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateVariableRule()); }
	 iv_ruleStateVariable=ruleStateVariable 
	 { $current=$iv_ruleStateVariable.current; } 
	 EOF 
;

// Rule StateVariable
ruleStateVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStateVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateVariableRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getStateVariableAccess().getStateConstraintsStateConstraintCrossReference_1_0()); 
	}

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateVariableRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getStateVariableAccess().getStateUpdatesStateUpdateCrossReference_2_0()); 
	}

)
)*)
;





// Entry rule entryRuleController
entryRuleController returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControllerRule()); }
	 iv_ruleController=ruleController 
	 { $current=$iv_ruleController.current; } 
	 EOF 
;

// Rule Controller
ruleController returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getControllerAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControllerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getControllerAccess().getStateConstraintStateConstraintParserRuleCall_1_0()); 
	    }
		lv_stateConstraint_1_0=ruleStateConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControllerRule());
	        }
       		add(
       			$current, 
       			"stateConstraint",
        		lv_stateConstraint_1_0, 
        		"StateConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getControllerAccess().getHardwareCommandHardwareCommandParserRuleCall_2_0()); 
	    }
		lv_hardwareCommand_2_0=ruleHardwareCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControllerRule());
	        }
       		add(
       			$current, 
       			"hardwareCommand",
        		lv_hardwareCommand_2_0, 
        		"HardwareCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleEstimator
entryRuleEstimator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEstimatorRule()); }
	 iv_ruleEstimator=ruleEstimator 
	 { $current=$iv_ruleEstimator.current; } 
	 EOF 
;

// Rule Estimator
ruleEstimator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEstimatorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEstimatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEstimatorAccess().getHardwareMeasurementHardwareMeasurementParserRuleCall_1_0()); 
	    }
		lv_hardwareMeasurement_1_0=ruleHardwareMeasurement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEstimatorRule());
	        }
       		add(
       			$current, 
       			"hardwareMeasurement",
        		lv_hardwareMeasurement_1_0, 
        		"HardwareMeasurement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleStateConstraint
entryRuleStateConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateConstraintRule()); }
	 iv_ruleStateConstraint=ruleStateConstraint 
	 { $current=$iv_ruleStateConstraint.current; } 
	 EOF 
;

// Rule StateConstraint
ruleStateConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStateConstraintAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateConstraintRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getStateConstraintAccess().getControllersControllerCrossReference_1_0()); 
	}

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateConstraintRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getStateConstraintAccess().getEstimatorsEstimatorCrossReference_2_0()); 
	}

)
)*)
;







// Entry rule entryRuleHardwareCommand
entryRuleHardwareCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHardwareCommandRule()); }
	 iv_ruleHardwareCommand=ruleHardwareCommand 
	 { $current=$iv_ruleHardwareCommand.current; } 
	 EOF 
;

// Rule HardwareCommand
ruleHardwareCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHardwareCommandAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHardwareCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHardwareCommandRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getHardwareCommandAccess().getControllerControllerCrossReference_1_0()); 
	}

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHardwareCommandRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getHardwareCommandAccess().getAdapterHardwareAdapterCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleHardwareMeasurement
entryRuleHardwareMeasurement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHardwareMeasurementRule()); }
	 iv_ruleHardwareMeasurement=ruleHardwareMeasurement 
	 { $current=$iv_ruleHardwareMeasurement.current; } 
	 EOF 
;

// Rule HardwareMeasurement
ruleHardwareMeasurement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHardwareMeasurementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHardwareMeasurementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHardwareMeasurementRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getHardwareMeasurementAccess().getAdapterHardwareAdapterCrossReference_1_0()); 
	}

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHardwareMeasurementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getHardwareMeasurementAccess().getEstimatorEstimatorCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleDevice
entryRuleDevice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	 iv_ruleDevice=ruleDevice 
	 { $current=$iv_ruleDevice.current; } 
	 EOF 
;

// Rule Device
ruleDevice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeviceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_description_1_0=RULE_STRING
		{
			newLeafNode(lv_description_1_0, grammarAccess.getDeviceAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeviceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"STRING");
	    }

)
))
;











RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


