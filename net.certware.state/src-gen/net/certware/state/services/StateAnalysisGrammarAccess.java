/*
* generated by Xtext
*/
package net.certware.state.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StateAnalysisGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Assignment cSubsystemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSubsystemsSubsystemParserRuleCall_0 = (RuleCall)cSubsystemsAssignment.eContents().get(0);
		
		//System:
		//	subsystems+=Subsystem*;
		public ParserRule getRule() { return rule; }

		//subsystems+=Subsystem*
		public Assignment getSubsystemsAssignment() { return cSubsystemsAssignment; }

		//Subsystem
		public RuleCall getSubsystemsSubsystemParserRuleCall_0() { return cSubsystemsSubsystemParserRuleCall_0; }
	}

	public class SubsystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subsystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubsystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeploymentSetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeploymentSetsDeploymentSetParserRuleCall_2_0 = (RuleCall)cDeploymentSetsAssignment_2.eContents().get(0);
		
		//Subsystem:
		//	"Subsystem" name=ID deploymentSets+=DeploymentSet*;
		public ParserRule getRule() { return rule; }

		//"Subsystem" name=ID deploymentSets+=DeploymentSet*
		public Group getGroup() { return cGroup; }

		//"Subsystem"
		public Keyword getSubsystemKeyword_0() { return cSubsystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//deploymentSets+=DeploymentSet*
		public Assignment getDeploymentSetsAssignment_2() { return cDeploymentSetsAssignment_2; }

		//DeploymentSet
		public RuleCall getDeploymentSetsDeploymentSetParserRuleCall_2_0() { return cDeploymentSetsDeploymentSetParserRuleCall_2_0; }
	}

	public class DeploymentSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeploymentSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDeploymentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeploymentsDeploymentParserRuleCall_1_0 = (RuleCall)cDeploymentsAssignment_1.eContents().get(0);
		
		//DeploymentSet:
		//	name=ID deployments+=Deployment*;
		public ParserRule getRule() { return rule; }

		//name=ID deployments+=Deployment*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//deployments+=Deployment*
		public Assignment getDeploymentsAssignment_1() { return cDeploymentsAssignment_1; }

		//Deployment
		public RuleCall getDeploymentsDeploymentParserRuleCall_1_0() { return cDeploymentsDeploymentParserRuleCall_1_0; }
	}

	public class DeploymentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deployment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		
		//Deployment:
		//	name=ID components+=Component*;
		public ParserRule getRule() { return rule; }

		//name=ID components+=Component*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//components+=Component*
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//Component
		public RuleCall getComponentsComponentParserRuleCall_1_0() { return cComponentsComponentParserRuleCall_1_0; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cSvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSvStateVariableParserRuleCall_1_0 = (RuleCall)cSvAssignment_1.eContents().get(0);
		private final Assignment cControllerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControllerControllerParserRuleCall_2_0 = (RuleCall)cControllerAssignment_2.eContents().get(0);
		private final Assignment cEstimatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEstimatorEstimatorParserRuleCall_3_0 = (RuleCall)cEstimatorAssignment_3.eContents().get(0);
		
		//Component:
		//	name=ID sv=StateVariable controller+=Controller+ estimator+=Estimator+;
		public ParserRule getRule() { return rule; }

		//name=ID sv=StateVariable controller+=Controller+ estimator+=Estimator+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//sv=StateVariable
		public Assignment getSvAssignment_1() { return cSvAssignment_1; }

		//StateVariable
		public RuleCall getSvStateVariableParserRuleCall_1_0() { return cSvStateVariableParserRuleCall_1_0; }

		//controller+=Controller+
		public Assignment getControllerAssignment_2() { return cControllerAssignment_2; }

		//Controller
		public RuleCall getControllerControllerParserRuleCall_2_0() { return cControllerControllerParserRuleCall_2_0; }

		//estimator+=Estimator+
		public Assignment getEstimatorAssignment_3() { return cEstimatorAssignment_3; }

		//Estimator
		public RuleCall getEstimatorEstimatorParserRuleCall_3_0() { return cEstimatorEstimatorParserRuleCall_3_0; }
	}

	public class StateVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cStateConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateConstraintsStateConstraintCrossReference_1_0 = (CrossReference)cStateConstraintsAssignment_1.eContents().get(0);
		private final RuleCall cStateConstraintsStateConstraintIDTerminalRuleCall_1_0_1 = (RuleCall)cStateConstraintsStateConstraintCrossReference_1_0.eContents().get(1);
		private final Assignment cStateUpdatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateUpdatesStateUpdateCrossReference_2_0 = (CrossReference)cStateUpdatesAssignment_2.eContents().get(0);
		private final RuleCall cStateUpdatesStateUpdateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateUpdatesStateUpdateCrossReference_2_0.eContents().get(1);
		
		//StateVariable:
		//	name=ID stateConstraints+=[StateConstraint]* stateUpdates+=[StateUpdate]*;
		public ParserRule getRule() { return rule; }

		//name=ID stateConstraints+=[StateConstraint]* stateUpdates+=[StateUpdate]*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//stateConstraints+=[StateConstraint]*
		public Assignment getStateConstraintsAssignment_1() { return cStateConstraintsAssignment_1; }

		//[StateConstraint]
		public CrossReference getStateConstraintsStateConstraintCrossReference_1_0() { return cStateConstraintsStateConstraintCrossReference_1_0; }

		//ID
		public RuleCall getStateConstraintsStateConstraintIDTerminalRuleCall_1_0_1() { return cStateConstraintsStateConstraintIDTerminalRuleCall_1_0_1; }

		//stateUpdates+=[StateUpdate]*
		public Assignment getStateUpdatesAssignment_2() { return cStateUpdatesAssignment_2; }

		//[StateUpdate]
		public CrossReference getStateUpdatesStateUpdateCrossReference_2_0() { return cStateUpdatesStateUpdateCrossReference_2_0; }

		//ID
		public RuleCall getStateUpdatesStateUpdateIDTerminalRuleCall_2_0_1() { return cStateUpdatesStateUpdateIDTerminalRuleCall_2_0_1; }
	}

	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cStateConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateConstraintStateConstraintParserRuleCall_1_0 = (RuleCall)cStateConstraintAssignment_1.eContents().get(0);
		private final Assignment cHardwareCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHardwareCommandHardwareCommandParserRuleCall_2_0 = (RuleCall)cHardwareCommandAssignment_2.eContents().get(0);
		
		//Controller:
		//	name=ID stateConstraint+=StateConstraint hardwareCommand+=HardwareCommand+;
		public ParserRule getRule() { return rule; }

		//name=ID stateConstraint+=StateConstraint hardwareCommand+=HardwareCommand+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//stateConstraint+=StateConstraint
		public Assignment getStateConstraintAssignment_1() { return cStateConstraintAssignment_1; }

		//StateConstraint
		public RuleCall getStateConstraintStateConstraintParserRuleCall_1_0() { return cStateConstraintStateConstraintParserRuleCall_1_0; }

		//hardwareCommand+=HardwareCommand+
		public Assignment getHardwareCommandAssignment_2() { return cHardwareCommandAssignment_2; }

		//HardwareCommand
		public RuleCall getHardwareCommandHardwareCommandParserRuleCall_2_0() { return cHardwareCommandHardwareCommandParserRuleCall_2_0; }
	}

	public class EstimatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Estimator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cHardwareMeasurementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHardwareMeasurementHardwareMeasurementParserRuleCall_1_0 = (RuleCall)cHardwareMeasurementAssignment_1.eContents().get(0);
		
		//Estimator:
		//	name=ID hardwareMeasurement+=HardwareMeasurement+;
		public ParserRule getRule() { return rule; }

		//name=ID hardwareMeasurement+=HardwareMeasurement+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//hardwareMeasurement+=HardwareMeasurement+
		public Assignment getHardwareMeasurementAssignment_1() { return cHardwareMeasurementAssignment_1; }

		//HardwareMeasurement
		public RuleCall getHardwareMeasurementHardwareMeasurementParserRuleCall_1_0() { return cHardwareMeasurementHardwareMeasurementParserRuleCall_1_0; }
	}

	public class StateConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cControllersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cControllersControllerCrossReference_1_0 = (CrossReference)cControllersAssignment_1.eContents().get(0);
		private final RuleCall cControllersControllerIDTerminalRuleCall_1_0_1 = (RuleCall)cControllersControllerCrossReference_1_0.eContents().get(1);
		private final Assignment cEstimatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEstimatorsEstimatorCrossReference_2_0 = (CrossReference)cEstimatorsAssignment_2.eContents().get(0);
		private final RuleCall cEstimatorsEstimatorIDTerminalRuleCall_2_0_1 = (RuleCall)cEstimatorsEstimatorCrossReference_2_0.eContents().get(1);
		
		//StateConstraint:
		//	name=ID controllers+=[Controller]* estimators+=[Estimator]*;
		public ParserRule getRule() { return rule; }

		//name=ID controllers+=[Controller]* estimators+=[Estimator]*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//controllers+=[Controller]*
		public Assignment getControllersAssignment_1() { return cControllersAssignment_1; }

		//[Controller]
		public CrossReference getControllersControllerCrossReference_1_0() { return cControllersControllerCrossReference_1_0; }

		//ID
		public RuleCall getControllersControllerIDTerminalRuleCall_1_0_1() { return cControllersControllerIDTerminalRuleCall_1_0_1; }

		//estimators+=[Estimator]*
		public Assignment getEstimatorsAssignment_2() { return cEstimatorsAssignment_2; }

		//[Estimator]
		public CrossReference getEstimatorsEstimatorCrossReference_2_0() { return cEstimatorsEstimatorCrossReference_2_0; }

		//ID
		public RuleCall getEstimatorsEstimatorIDTerminalRuleCall_2_0_1() { return cEstimatorsEstimatorIDTerminalRuleCall_2_0_1; }
	}

	public class StateUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cControllersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cControllersControllerCrossReference_1_0 = (CrossReference)cControllersAssignment_1.eContents().get(0);
		private final RuleCall cControllersControllerIDTerminalRuleCall_1_0_1 = (RuleCall)cControllersControllerCrossReference_1_0.eContents().get(1);
		private final Assignment cEstimatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEstimatorsEstimatorCrossReference_2_0 = (CrossReference)cEstimatorsAssignment_2.eContents().get(0);
		private final RuleCall cEstimatorsEstimatorIDTerminalRuleCall_2_0_1 = (RuleCall)cEstimatorsEstimatorCrossReference_2_0.eContents().get(1);
		
		//StateUpdate:
		//	name=ID controllers+=[Controller]* estimators+=[Estimator]*;
		public ParserRule getRule() { return rule; }

		//name=ID controllers+=[Controller]* estimators+=[Estimator]*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//controllers+=[Controller]*
		public Assignment getControllersAssignment_1() { return cControllersAssignment_1; }

		//[Controller]
		public CrossReference getControllersControllerCrossReference_1_0() { return cControllersControllerCrossReference_1_0; }

		//ID
		public RuleCall getControllersControllerIDTerminalRuleCall_1_0_1() { return cControllersControllerIDTerminalRuleCall_1_0_1; }

		//estimators+=[Estimator]*
		public Assignment getEstimatorsAssignment_2() { return cEstimatorsAssignment_2; }

		//[Estimator]
		public CrossReference getEstimatorsEstimatorCrossReference_2_0() { return cEstimatorsEstimatorCrossReference_2_0; }

		//ID
		public RuleCall getEstimatorsEstimatorIDTerminalRuleCall_2_0_1() { return cEstimatorsEstimatorIDTerminalRuleCall_2_0_1; }
	}

	public class HardwareCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HardwareCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cControllerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cControllerControllerCrossReference_1_0 = (CrossReference)cControllerAssignment_1.eContents().get(0);
		private final RuleCall cControllerControllerIDTerminalRuleCall_1_0_1 = (RuleCall)cControllerControllerCrossReference_1_0.eContents().get(1);
		private final Assignment cAdapterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAdapterHardwareAdapterCrossReference_2_0 = (CrossReference)cAdapterAssignment_2.eContents().get(0);
		private final RuleCall cAdapterHardwareAdapterIDTerminalRuleCall_2_0_1 = (RuleCall)cAdapterHardwareAdapterCrossReference_2_0.eContents().get(1);
		
		//HardwareCommand:
		//	name=ID controller=[Controller] adapter=[HardwareAdapter];
		public ParserRule getRule() { return rule; }

		//name=ID controller=[Controller] adapter=[HardwareAdapter]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//controller=[Controller]
		public Assignment getControllerAssignment_1() { return cControllerAssignment_1; }

		//[Controller]
		public CrossReference getControllerControllerCrossReference_1_0() { return cControllerControllerCrossReference_1_0; }

		//ID
		public RuleCall getControllerControllerIDTerminalRuleCall_1_0_1() { return cControllerControllerIDTerminalRuleCall_1_0_1; }

		//adapter=[HardwareAdapter]
		public Assignment getAdapterAssignment_2() { return cAdapterAssignment_2; }

		//[HardwareAdapter]
		public CrossReference getAdapterHardwareAdapterCrossReference_2_0() { return cAdapterHardwareAdapterCrossReference_2_0; }

		//ID
		public RuleCall getAdapterHardwareAdapterIDTerminalRuleCall_2_0_1() { return cAdapterHardwareAdapterIDTerminalRuleCall_2_0_1; }
	}

	public class HardwareMeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HardwareMeasurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAdapterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAdapterHardwareAdapterCrossReference_1_0 = (CrossReference)cAdapterAssignment_1.eContents().get(0);
		private final RuleCall cAdapterHardwareAdapterIDTerminalRuleCall_1_0_1 = (RuleCall)cAdapterHardwareAdapterCrossReference_1_0.eContents().get(1);
		private final Assignment cEstimatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEstimatorEstimatorCrossReference_2_0 = (CrossReference)cEstimatorAssignment_2.eContents().get(0);
		private final RuleCall cEstimatorEstimatorIDTerminalRuleCall_2_0_1 = (RuleCall)cEstimatorEstimatorCrossReference_2_0.eContents().get(1);
		
		//HardwareMeasurement:
		//	name=ID adapter=[HardwareAdapter] estimator=[Estimator];
		public ParserRule getRule() { return rule; }

		//name=ID adapter=[HardwareAdapter] estimator=[Estimator]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//adapter=[HardwareAdapter]
		public Assignment getAdapterAssignment_1() { return cAdapterAssignment_1; }

		//[HardwareAdapter]
		public CrossReference getAdapterHardwareAdapterCrossReference_1_0() { return cAdapterHardwareAdapterCrossReference_1_0; }

		//ID
		public RuleCall getAdapterHardwareAdapterIDTerminalRuleCall_1_0_1() { return cAdapterHardwareAdapterIDTerminalRuleCall_1_0_1; }

		//estimator=[Estimator]
		public Assignment getEstimatorAssignment_2() { return cEstimatorAssignment_2; }

		//[Estimator]
		public CrossReference getEstimatorEstimatorCrossReference_2_0() { return cEstimatorEstimatorCrossReference_2_0; }

		//ID
		public RuleCall getEstimatorEstimatorIDTerminalRuleCall_2_0_1() { return cEstimatorEstimatorIDTerminalRuleCall_2_0_1; }
	}

	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//Device:
		//	name=ID description=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID description=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
	}

	public class DeviceCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAdapterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAdapterHardwareAdapterCrossReference_1_0 = (CrossReference)cAdapterAssignment_1.eContents().get(0);
		private final RuleCall cAdapterHardwareAdapterIDTerminalRuleCall_1_0_1 = (RuleCall)cAdapterHardwareAdapterCrossReference_1_0.eContents().get(1);
		private final Assignment cDeviceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeviceDeviceParserRuleCall_2_0 = (RuleCall)cDeviceAssignment_2.eContents().get(0);
		
		//DeviceCommand:
		//	name=ID adapter=[HardwareAdapter] device=Device;
		public ParserRule getRule() { return rule; }

		//name=ID adapter=[HardwareAdapter] device=Device
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//adapter=[HardwareAdapter]
		public Assignment getAdapterAssignment_1() { return cAdapterAssignment_1; }

		//[HardwareAdapter]
		public CrossReference getAdapterHardwareAdapterCrossReference_1_0() { return cAdapterHardwareAdapterCrossReference_1_0; }

		//ID
		public RuleCall getAdapterHardwareAdapterIDTerminalRuleCall_1_0_1() { return cAdapterHardwareAdapterIDTerminalRuleCall_1_0_1; }

		//device=Device
		public Assignment getDeviceAssignment_2() { return cDeviceAssignment_2; }

		//Device
		public RuleCall getDeviceDeviceParserRuleCall_2_0() { return cDeviceDeviceParserRuleCall_2_0; }
	}

	public class DeviceMeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceMeasurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAdapterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAdapterHardwareAdapterCrossReference_1_0 = (CrossReference)cAdapterAssignment_1.eContents().get(0);
		private final RuleCall cAdapterHardwareAdapterIDTerminalRuleCall_1_0_1 = (RuleCall)cAdapterHardwareAdapterCrossReference_1_0.eContents().get(1);
		private final Assignment cDeviceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeviceDeviceParserRuleCall_2_0 = (RuleCall)cDeviceAssignment_2.eContents().get(0);
		
		//DeviceMeasurement:
		//	name=ID adapter=[HardwareAdapter] device=Device;
		public ParserRule getRule() { return rule; }

		//name=ID adapter=[HardwareAdapter] device=Device
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//adapter=[HardwareAdapter]
		public Assignment getAdapterAssignment_1() { return cAdapterAssignment_1; }

		//[HardwareAdapter]
		public CrossReference getAdapterHardwareAdapterCrossReference_1_0() { return cAdapterHardwareAdapterCrossReference_1_0; }

		//ID
		public RuleCall getAdapterHardwareAdapterIDTerminalRuleCall_1_0_1() { return cAdapterHardwareAdapterIDTerminalRuleCall_1_0_1; }

		//device=Device
		public Assignment getDeviceAssignment_2() { return cDeviceAssignment_2; }

		//Device
		public RuleCall getDeviceDeviceParserRuleCall_2_0() { return cDeviceDeviceParserRuleCall_2_0; }
	}

	public class HardwareAdapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HardwareAdapter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cHardwareCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cHardwareCommandsHardwareCommandCrossReference_1_0 = (CrossReference)cHardwareCommandsAssignment_1.eContents().get(0);
		private final RuleCall cHardwareCommandsHardwareCommandIDTerminalRuleCall_1_0_1 = (RuleCall)cHardwareCommandsHardwareCommandCrossReference_1_0.eContents().get(1);
		private final Assignment cHardwareMeasurementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cHardwareMeasurementsHardwareMeasurementCrossReference_2_0 = (CrossReference)cHardwareMeasurementsAssignment_2.eContents().get(0);
		private final RuleCall cHardwareMeasurementsHardwareMeasurementIDTerminalRuleCall_2_0_1 = (RuleCall)cHardwareMeasurementsHardwareMeasurementCrossReference_2_0.eContents().get(1);
		private final Assignment cDeviceCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDeviceCommandsDeviceCommandCrossReference_3_0 = (CrossReference)cDeviceCommandsAssignment_3.eContents().get(0);
		private final RuleCall cDeviceCommandsDeviceCommandIDTerminalRuleCall_3_0_1 = (RuleCall)cDeviceCommandsDeviceCommandCrossReference_3_0.eContents().get(1);
		private final Assignment cDeviceMeasurementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDeviceMeasurementsDeviceMeasurementCrossReference_4_0 = (CrossReference)cDeviceMeasurementsAssignment_4.eContents().get(0);
		private final RuleCall cDeviceMeasurementsDeviceMeasurementIDTerminalRuleCall_4_0_1 = (RuleCall)cDeviceMeasurementsDeviceMeasurementCrossReference_4_0.eContents().get(1);
		
		//HardwareAdapter:
		//	name=ID hardwareCommands+=[HardwareCommand]* hardwareMeasurements+=[HardwareMeasurement]*
		//	deviceCommands+=[DeviceCommand]* deviceMeasurements+=[DeviceMeasurement]*;
		public ParserRule getRule() { return rule; }

		//name=ID hardwareCommands+=[HardwareCommand]* hardwareMeasurements+=[HardwareMeasurement]*
		//deviceCommands+=[DeviceCommand]* deviceMeasurements+=[DeviceMeasurement]*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//hardwareCommands+=[HardwareCommand]*
		public Assignment getHardwareCommandsAssignment_1() { return cHardwareCommandsAssignment_1; }

		//[HardwareCommand]
		public CrossReference getHardwareCommandsHardwareCommandCrossReference_1_0() { return cHardwareCommandsHardwareCommandCrossReference_1_0; }

		//ID
		public RuleCall getHardwareCommandsHardwareCommandIDTerminalRuleCall_1_0_1() { return cHardwareCommandsHardwareCommandIDTerminalRuleCall_1_0_1; }

		//hardwareMeasurements+=[HardwareMeasurement]*
		public Assignment getHardwareMeasurementsAssignment_2() { return cHardwareMeasurementsAssignment_2; }

		//[HardwareMeasurement]
		public CrossReference getHardwareMeasurementsHardwareMeasurementCrossReference_2_0() { return cHardwareMeasurementsHardwareMeasurementCrossReference_2_0; }

		//ID
		public RuleCall getHardwareMeasurementsHardwareMeasurementIDTerminalRuleCall_2_0_1() { return cHardwareMeasurementsHardwareMeasurementIDTerminalRuleCall_2_0_1; }

		//deviceCommands+=[DeviceCommand]*
		public Assignment getDeviceCommandsAssignment_3() { return cDeviceCommandsAssignment_3; }

		//[DeviceCommand]
		public CrossReference getDeviceCommandsDeviceCommandCrossReference_3_0() { return cDeviceCommandsDeviceCommandCrossReference_3_0; }

		//ID
		public RuleCall getDeviceCommandsDeviceCommandIDTerminalRuleCall_3_0_1() { return cDeviceCommandsDeviceCommandIDTerminalRuleCall_3_0_1; }

		//deviceMeasurements+=[DeviceMeasurement]*
		public Assignment getDeviceMeasurementsAssignment_4() { return cDeviceMeasurementsAssignment_4; }

		//[DeviceMeasurement]
		public CrossReference getDeviceMeasurementsDeviceMeasurementCrossReference_4_0() { return cDeviceMeasurementsDeviceMeasurementCrossReference_4_0; }

		//ID
		public RuleCall getDeviceMeasurementsDeviceMeasurementIDTerminalRuleCall_4_0_1() { return cDeviceMeasurementsDeviceMeasurementIDTerminalRuleCall_4_0_1; }
	}
	
	
	private SystemElements pSystem;
	private SubsystemElements pSubsystem;
	private DeploymentSetElements pDeploymentSet;
	private DeploymentElements pDeployment;
	private ComponentElements pComponent;
	private StateVariableElements pStateVariable;
	private ControllerElements pController;
	private EstimatorElements pEstimator;
	private StateConstraintElements pStateConstraint;
	private StateUpdateElements pStateUpdate;
	private HardwareCommandElements pHardwareCommand;
	private HardwareMeasurementElements pHardwareMeasurement;
	private DeviceElements pDevice;
	private DeviceCommandElements pDeviceCommand;
	private DeviceMeasurementElements pDeviceMeasurement;
	private HardwareAdapterElements pHardwareAdapter;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateAnalysisGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.certware.state.StateAnalysis".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	subsystems+=Subsystem*;
	public SystemElements getSystemAccess() {
		return (pSystem != null) ? pSystem : (pSystem = new SystemElements());
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//Subsystem:
	//	"Subsystem" name=ID deploymentSets+=DeploymentSet*;
	public SubsystemElements getSubsystemAccess() {
		return (pSubsystem != null) ? pSubsystem : (pSubsystem = new SubsystemElements());
	}
	
	public ParserRule getSubsystemRule() {
		return getSubsystemAccess().getRule();
	}

	//DeploymentSet:
	//	name=ID deployments+=Deployment*;
	public DeploymentSetElements getDeploymentSetAccess() {
		return (pDeploymentSet != null) ? pDeploymentSet : (pDeploymentSet = new DeploymentSetElements());
	}
	
	public ParserRule getDeploymentSetRule() {
		return getDeploymentSetAccess().getRule();
	}

	//Deployment:
	//	name=ID components+=Component*;
	public DeploymentElements getDeploymentAccess() {
		return (pDeployment != null) ? pDeployment : (pDeployment = new DeploymentElements());
	}
	
	public ParserRule getDeploymentRule() {
		return getDeploymentAccess().getRule();
	}

	//Component:
	//	name=ID sv=StateVariable controller+=Controller+ estimator+=Estimator+;
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//StateVariable:
	//	name=ID stateConstraints+=[StateConstraint]* stateUpdates+=[StateUpdate]*;
	public StateVariableElements getStateVariableAccess() {
		return (pStateVariable != null) ? pStateVariable : (pStateVariable = new StateVariableElements());
	}
	
	public ParserRule getStateVariableRule() {
		return getStateVariableAccess().getRule();
	}

	//Controller:
	//	name=ID stateConstraint+=StateConstraint hardwareCommand+=HardwareCommand+;
	public ControllerElements getControllerAccess() {
		return (pController != null) ? pController : (pController = new ControllerElements());
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}

	//Estimator:
	//	name=ID hardwareMeasurement+=HardwareMeasurement+;
	public EstimatorElements getEstimatorAccess() {
		return (pEstimator != null) ? pEstimator : (pEstimator = new EstimatorElements());
	}
	
	public ParserRule getEstimatorRule() {
		return getEstimatorAccess().getRule();
	}

	//StateConstraint:
	//	name=ID controllers+=[Controller]* estimators+=[Estimator]*;
	public StateConstraintElements getStateConstraintAccess() {
		return (pStateConstraint != null) ? pStateConstraint : (pStateConstraint = new StateConstraintElements());
	}
	
	public ParserRule getStateConstraintRule() {
		return getStateConstraintAccess().getRule();
	}

	//StateUpdate:
	//	name=ID controllers+=[Controller]* estimators+=[Estimator]*;
	public StateUpdateElements getStateUpdateAccess() {
		return (pStateUpdate != null) ? pStateUpdate : (pStateUpdate = new StateUpdateElements());
	}
	
	public ParserRule getStateUpdateRule() {
		return getStateUpdateAccess().getRule();
	}

	//HardwareCommand:
	//	name=ID controller=[Controller] adapter=[HardwareAdapter];
	public HardwareCommandElements getHardwareCommandAccess() {
		return (pHardwareCommand != null) ? pHardwareCommand : (pHardwareCommand = new HardwareCommandElements());
	}
	
	public ParserRule getHardwareCommandRule() {
		return getHardwareCommandAccess().getRule();
	}

	//HardwareMeasurement:
	//	name=ID adapter=[HardwareAdapter] estimator=[Estimator];
	public HardwareMeasurementElements getHardwareMeasurementAccess() {
		return (pHardwareMeasurement != null) ? pHardwareMeasurement : (pHardwareMeasurement = new HardwareMeasurementElements());
	}
	
	public ParserRule getHardwareMeasurementRule() {
		return getHardwareMeasurementAccess().getRule();
	}

	//Device:
	//	name=ID description=STRING;
	public DeviceElements getDeviceAccess() {
		return (pDevice != null) ? pDevice : (pDevice = new DeviceElements());
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}

	//DeviceCommand:
	//	name=ID adapter=[HardwareAdapter] device=Device;
	public DeviceCommandElements getDeviceCommandAccess() {
		return (pDeviceCommand != null) ? pDeviceCommand : (pDeviceCommand = new DeviceCommandElements());
	}
	
	public ParserRule getDeviceCommandRule() {
		return getDeviceCommandAccess().getRule();
	}

	//DeviceMeasurement:
	//	name=ID adapter=[HardwareAdapter] device=Device;
	public DeviceMeasurementElements getDeviceMeasurementAccess() {
		return (pDeviceMeasurement != null) ? pDeviceMeasurement : (pDeviceMeasurement = new DeviceMeasurementElements());
	}
	
	public ParserRule getDeviceMeasurementRule() {
		return getDeviceMeasurementAccess().getRule();
	}

	//HardwareAdapter:
	//	name=ID hardwareCommands+=[HardwareCommand]* hardwareMeasurements+=[HardwareMeasurement]*
	//	deviceCommands+=[DeviceCommand]* deviceMeasurements+=[DeviceMeasurement]*;
	public HardwareAdapterElements getHardwareAdapterAccess() {
		return (pHardwareAdapter != null) ? pHardwareAdapter : (pHardwareAdapter = new HardwareAdapterElements());
	}
	
	public ParserRule getHardwareAdapterRule() {
		return getHardwareAdapterAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
