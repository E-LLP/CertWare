/**
 * NOT generated by Xtext
 */
package net.certware.intent.ui.labeling;

import com.google.inject.Inject;
import net.certware.intent.intentSpecification.Decomposition;
import net.certware.intent.intentSpecification.DecompositionType;
import net.certware.intent.intentSpecification.DocItem;
import net.certware.intent.intentSpecification.DocItemType;
import net.certware.intent.intentSpecification.Document;
import net.certware.intent.intentSpecification.Intent;
import net.certware.intent.intentSpecification.IntentType;
import net.certware.intent.intentSpecification.ListItem;
import net.certware.intent.intentSpecification.ListItemType;
import net.certware.intent.intentSpecification.ModelItem;
import net.certware.intent.intentSpecification.ModelType;
import net.certware.intent.intentSpecification.Refinement;
import net.certware.intent.intentSpecification.Specification;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class IntentSpecificationLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public IntentSpecificationLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String image(final Refinement e) {
    return "obj16/refinement.gif";
  }
  
  public String image(final Intent e) {
    return "obj16/intent.gif";
  }
  
  public String image(final Specification e) {
    return "obj16/specification.gif";
  }
  
  public String image(final Decomposition e) {
    return "obj16/decomposition.gif";
  }
  
  public String image(final Document e) {
    return "obj16/document.gif";
  }
  
  public String image(final ModelItem e) {
    return "obj16/modelitem.gif";
  }
  
  public String image(final ListItem e) {
    return "obj16/listitem.gif";
  }
  
  /**
   * text responses
   */
  public String text(final Intent e) {
    String _xblockexpression = null;
    {
      IntentType type = e.getType();
      String typeName = type.getTypeName();
      boolean _equals = "basic".equals(typeName);
      if (_equals) {
        String _plus = ("Basic" + " ");
        String _name = e.getName();
        return (_plus + _name);
      }
      boolean _equals_1 = "purpose".equals(typeName);
      if (_equals_1) {
        String _plus_1 = ("Purpose" + " ");
        String _name_1 = e.getName();
        return (_plus_1 + _name_1);
      }
      boolean _equals_2 = "principles".equals(typeName);
      if (_equals_2) {
        String _plus_2 = ("Principles" + " ");
        String _name_2 = e.getName();
        return (_plus_2 + _name_2);
      }
      boolean _equals_3 = "models".equals(typeName);
      if (_equals_3) {
        String _plus_3 = ("Models" + " ");
        String _name_3 = e.getName();
        return (_plus_3 + _name_3);
      }
      boolean _equals_4 = "design".equals(typeName);
      if (_equals_4) {
        String _plus_4 = ("Design" + " ");
        String _name_4 = e.getName();
        return (_plus_4 + _name_4);
      }
      boolean _equals_5 = "implementation".equals(typeName);
      if (_equals_5) {
        String _plus_5 = ("Implementation" + " ");
        String _name_5 = e.getName();
        return (_plus_5 + _name_5);
      }
      boolean _equals_6 = "operation".equals(typeName);
      if (_equals_6) {
        String _plus_6 = ("Operation" + " ");
        String _name_6 = e.getName();
        return (_plus_6 + _name_6);
      }
      String _plus_7 = ("Intent" + " ");
      String _name_7 = e.getName();
      String _plus_8 = (_plus_7 + _name_7);
      _xblockexpression = (_plus_8);
    }
    return _xblockexpression;
  }
  
  public String text(final Refinement e) {
    String _plus = ("Refinement" + " ");
    String _name = e.getName();
    String _plus_1 = (_plus + _name);
    return _plus_1;
  }
  
  public String text(final Decomposition e) {
    String _xblockexpression = null;
    {
      DecompositionType type = e.getType();
      String typeName = type.getTypeName();
      boolean _equals = "environment".equals(typeName);
      if (_equals) {
        String _plus = ("Environment" + " ");
        String _name = e.getName();
        return (_plus + _name);
      }
      boolean _equals_1 = "operator".equals(typeName);
      if (_equals_1) {
        String _plus_1 = ("Operator" + " ");
        String _name_1 = e.getName();
        return (_plus_1 + _name_1);
      }
      boolean _equals_2 = "system".equals(typeName);
      if (_equals_2) {
        String _plus_2 = ("System" + " ");
        String _name_2 = e.getName();
        return (_plus_2 + _name_2);
      }
      boolean _equals_3 = "verification".equals(typeName);
      if (_equals_3) {
        String _plus_3 = ("V&V" + " ");
        String _name_3 = e.getName();
        return (_plus_3 + _name_3);
      }
      String _plus_4 = ("Decomposition" + " ");
      String _name_4 = e.getName();
      String _plus_5 = (_plus_4 + _name_4);
      _xblockexpression = (_plus_5);
    }
    return _xblockexpression;
  }
  
  public String text(final Document e) {
    return "Document";
  }
  
  public String text(final DocItem e) {
    String _xblockexpression = null;
    {
      DocItemType type = e.getType();
      String typeName = type.getTypeName();
      boolean _equals = "condition".equals(typeName);
      if (_equals) {
        String _plus = ("Condition" + " ");
        String _name = e.getName();
        return (_plus + _name);
      }
      boolean _equals_1 = "figure".equals(typeName);
      if (_equals_1) {
        String _plus_1 = ("Figure" + " ");
        String _name_1 = e.getName();
        return (_plus_1 + _name_1);
      }
      boolean _equals_2 = "break".equals(typeName);
      if (_equals_2) {
        return "Break";
      }
      boolean _equals_3 = "model".equals(typeName);
      if (_equals_3) {
        String _plus_2 = ("Model" + " ");
        String _name_2 = e.getName();
        return (_plus_2 + _name_2);
      }
      boolean _equals_4 = "paragraph".equals(typeName);
      if (_equals_4) {
        String _plus_3 = ("Paragraph" + " ");
        String _name_3 = e.getName();
        return (_plus_3 + _name_3);
      }
      boolean _equals_5 = "section".equals(typeName);
      if (_equals_5) {
        String _plus_4 = ("Section" + " ");
        String _name_4 = e.getName();
        return (_plus_4 + _name_4);
      }
      boolean _equals_6 = "table".equals(typeName);
      if (_equals_6) {
        String _plus_5 = ("Table" + " ");
        String _name_5 = e.getName();
        return (_plus_5 + _name_5);
      }
      String _plus_6 = ("Item" + " ");
      String _name_6 = e.getName();
      String _plus_7 = (_plus_6 + _name_6);
      _xblockexpression = (_plus_7);
    }
    return _xblockexpression;
  }
  
  public String text(final ModelItem e) {
    String _xblockexpression = null;
    {
      ModelType type = e.getType();
      String typeName = type.getTypeName();
      boolean _equals = "output".equals(typeName);
      if (_equals) {
        String _plus = ("Output" + " ");
        String _name = e.getName();
        return (_plus + _name);
      }
      boolean _equals_1 = "mode".equals(typeName);
      if (_equals_1) {
        String _plus_1 = ("Mode" + " ");
        String _name_1 = e.getName();
        return (_plus_1 + _name_1);
      }
      boolean _equals_2 = "state".equals(typeName);
      if (_equals_2) {
        String _plus_2 = ("State" + " ");
        String _name_2 = e.getName();
        return (_plus_2 + _name_2);
      }
      boolean _equals_3 = "macro".equals(typeName);
      if (_equals_3) {
        String _plus_3 = ("Macro" + " ");
        String _name_3 = e.getName();
        return (_plus_3 + _name_3);
      }
      boolean _equals_4 = "function".equals(typeName);
      if (_equals_4) {
        String _plus_4 = ("Function" + " ");
        String _name_4 = e.getName();
        return (_plus_4 + _name_4);
      }
      boolean _equals_5 = "input".equals(typeName);
      if (_equals_5) {
        String _plus_5 = ("Input" + " ");
        String _name_5 = e.getName();
        return (_plus_5 + _name_5);
      }
      String _plus_6 = ("Model" + " ");
      String _name_6 = e.getName();
      String _plus_7 = (_plus_6 + _name_6);
      _xblockexpression = (_plus_7);
    }
    return _xblockexpression;
  }
  
  public String text(final ListItem e) {
    String _xblockexpression = null;
    {
      ListItemType type = e.getType();
      String _typeName = type.getTypeName();
      boolean _equals = "hazard".equals(_typeName);
      if (_equals) {
        String _plus = ("Hazard" + " ");
        String _name = e.getName();
        return (_plus + _name);
      }
      String _typeName_1 = type.getTypeName();
      boolean _equals_1 = "requirement".equals(_typeName_1);
      if (_equals_1) {
        String _plus_1 = ("Requirement" + " ");
        String _name_1 = e.getName();
        return (_plus_1 + _name_1);
      }
      String _typeName_2 = type.getTypeName();
      boolean _equals_2 = "goal".equals(_typeName_2);
      if (_equals_2) {
        String _plus_2 = ("Goal" + " ");
        String _name_2 = e.getName();
        return (_plus_2 + _name_2);
      }
      String _typeName_3 = type.getTypeName();
      boolean _equals_3 = "constraint".equals(_typeName_3);
      if (_equals_3) {
        String _plus_3 = ("Constraint" + " ");
        String _name_3 = e.getName();
        return (_plus_3 + _name_3);
      }
      String _plus_4 = ("List" + " ");
      String _name_4 = e.getName();
      String _plus_5 = (_plus_4 + _name_4);
      _xblockexpression = (_plus_5);
    }
    return _xblockexpression;
  }
}
