/*
* generated by Xtext
*/
package net.certware.intent.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import net.certware.intent.services.IntentSpecificationGrammarAccess;

public class IntentSpecificationParser extends AbstractContentAssistParser {
	
	@Inject
	private IntentSpecificationGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.certware.intent.ui.contentassist.antlr.internal.InternalIntentSpecificationParser createParser() {
		net.certware.intent.ui.contentassist.antlr.internal.InternalIntentSpecificationParser result = new net.certware.intent.ui.contentassist.antlr.internal.InternalIntentSpecificationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getIntentTypeAccess().getAlternatives(), "rule__IntentType__Alternatives");
					put(grammarAccess.getDecompositionTypeAccess().getAlternatives(), "rule__DecompositionType__Alternatives");
					put(grammarAccess.getDocItemTypeAccess().getAlternatives(), "rule__DocItemType__Alternatives");
					put(grammarAccess.getModelTypeAccess().getAlternatives(), "rule__ModelType__Alternatives");
					put(grammarAccess.getListItemTypeAccess().getAlternatives(), "rule__ListItemType__Alternatives");
					put(grammarAccess.getSpecificationAccess().getGroup(), "rule__Specification__Group__0");
					put(grammarAccess.getRefinementAccess().getGroup(), "rule__Refinement__Group__0");
					put(grammarAccess.getIntentAccess().getGroup(), "rule__Intent__Group__0");
					put(grammarAccess.getDecompositionAccess().getGroup(), "rule__Decomposition__Group__0");
					put(grammarAccess.getDecompositionAccess().getGroup_3(), "rule__Decomposition__Group_3__0");
					put(grammarAccess.getDecompositionAccess().getGroup_4(), "rule__Decomposition__Group_4__0");
					put(grammarAccess.getDecompositionAccess().getGroup_5(), "rule__Decomposition__Group_5__0");
					put(grammarAccess.getDocumentAccess().getGroup(), "rule__Document__Group__0");
					put(grammarAccess.getDocItemAccess().getGroup(), "rule__DocItem__Group__0");
					put(grammarAccess.getModelItemAccess().getGroup(), "rule__ModelItem__Group__0");
					put(grammarAccess.getListItemAccess().getGroup(), "rule__ListItem__Group__0");
					put(grammarAccess.getListItemAccess().getGroup_3(), "rule__ListItem__Group_3__0");
					put(grammarAccess.getListItemAccess().getGroup_4(), "rule__ListItem__Group_4__0");
					put(grammarAccess.getListItemAccess().getGroup_5(), "rule__ListItem__Group_5__0");
					put(grammarAccess.getSpecificationAccess().getIdAssignment_1(), "rule__Specification__IdAssignment_1");
					put(grammarAccess.getSpecificationAccess().getRefinementsAssignment_2(), "rule__Specification__RefinementsAssignment_2");
					put(grammarAccess.getRefinementAccess().getIdAssignment_1(), "rule__Refinement__IdAssignment_1");
					put(grammarAccess.getRefinementAccess().getDescAssignment_2(), "rule__Refinement__DescAssignment_2");
					put(grammarAccess.getRefinementAccess().getIntentsAssignment_3(), "rule__Refinement__IntentsAssignment_3");
					put(grammarAccess.getIntentAccess().getTypeAssignment_0(), "rule__Intent__TypeAssignment_0");
					put(grammarAccess.getIntentAccess().getIdAssignment_1(), "rule__Intent__IdAssignment_1");
					put(grammarAccess.getIntentAccess().getDescAssignment_2(), "rule__Intent__DescAssignment_2");
					put(grammarAccess.getIntentAccess().getDecompositionsAssignment_3(), "rule__Intent__DecompositionsAssignment_3");
					put(grammarAccess.getDecompositionAccess().getTypeAssignment_0(), "rule__Decomposition__TypeAssignment_0");
					put(grammarAccess.getDecompositionAccess().getIdAssignment_1(), "rule__Decomposition__IdAssignment_1");
					put(grammarAccess.getDecompositionAccess().getDescAssignment_2(), "rule__Decomposition__DescAssignment_2");
					put(grammarAccess.getDecompositionAccess().getDocumentsAssignment_3_1(), "rule__Decomposition__DocumentsAssignment_3_1");
					put(grammarAccess.getDecompositionAccess().getModelsAssignment_4_1(), "rule__Decomposition__ModelsAssignment_4_1");
					put(grammarAccess.getDecompositionAccess().getItemsAssignment_5_1(), "rule__Decomposition__ItemsAssignment_5_1");
					put(grammarAccess.getDocumentAccess().getEntriesAssignment_1(), "rule__Document__EntriesAssignment_1");
					put(grammarAccess.getDocItemAccess().getTypeAssignment_0(), "rule__DocItem__TypeAssignment_0");
					put(grammarAccess.getDocItemAccess().getIdAssignment_1(), "rule__DocItem__IdAssignment_1");
					put(grammarAccess.getDocItemAccess().getRefAssignment_2(), "rule__DocItem__RefAssignment_2");
					put(grammarAccess.getModelItemAccess().getTypeAssignment_0(), "rule__ModelItem__TypeAssignment_0");
					put(grammarAccess.getModelItemAccess().getIdAssignment_1(), "rule__ModelItem__IdAssignment_1");
					put(grammarAccess.getModelItemAccess().getDescAssignment_2(), "rule__ModelItem__DescAssignment_2");
					put(grammarAccess.getListItemAccess().getTypeAssignment_0(), "rule__ListItem__TypeAssignment_0");
					put(grammarAccess.getListItemAccess().getIdAssignment_1(), "rule__ListItem__IdAssignment_1");
					put(grammarAccess.getListItemAccess().getDescAssignment_2(), "rule__ListItem__DescAssignment_2");
					put(grammarAccess.getListItemAccess().getDocReferencesAssignment_3_1(), "rule__ListItem__DocReferencesAssignment_3_1");
					put(grammarAccess.getListItemAccess().getItemReferencesAssignment_4_1(), "rule__ListItem__ItemReferencesAssignment_4_1");
					put(grammarAccess.getListItemAccess().getModelReferencesAssignment_5_1(), "rule__ListItem__ModelReferencesAssignment_5_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.certware.intent.ui.contentassist.antlr.internal.InternalIntentSpecificationParser typedParser = (net.certware.intent.ui.contentassist.antlr.internal.InternalIntentSpecificationParser) parser;
			typedParser.entryRuleSpecification();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public IntentSpecificationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(IntentSpecificationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
