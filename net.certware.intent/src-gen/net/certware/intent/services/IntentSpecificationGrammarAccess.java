/*
* generated by Xtext
*/
package net.certware.intent.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IntentSpecificationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cRefinementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefinementsRefinementParserRuleCall_2_0 = (RuleCall)cRefinementsAssignment_2.eContents().get(0);
		
		/// *
		// * An intent specification consists of one or more refinements.
		// * / Specification:
		//	"specification" id=ID refinements+=Refinement+;
		public ParserRule getRule() { return rule; }

		//"specification" id=ID refinements+=Refinement+
		public Group getGroup() { return cGroup; }

		//"specification"
		public Keyword getSpecificationKeyword_0() { return cSpecificationKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//refinements+=Refinement+
		public Assignment getRefinementsAssignment_2() { return cRefinementsAssignment_2; }

		//Refinement
		public RuleCall getRefinementsRefinementParserRuleCall_2_0() { return cRefinementsRefinementParserRuleCall_2_0; }
	}

	public class RefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefinementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		private final Assignment cIntentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntentsIntentParserRuleCall_3_0 = (RuleCall)cIntentsAssignment_3.eContents().get(0);
		
		/// *
		// * A refinement has no type and consists of one or more intents.
		// * / Refinement:
		//	"refinement" id=ID desc=STRING intents+=Intent+;
		public ParserRule getRule() { return rule; }

		//"refinement" id=ID desc=STRING intents+=Intent+
		public Group getGroup() { return cGroup; }

		//"refinement"
		public Keyword getRefinementKeyword_0() { return cRefinementKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//desc=STRING
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_2_0() { return cDescSTRINGTerminalRuleCall_2_0; }

		//intents+=Intent+
		public Assignment getIntentsAssignment_3() { return cIntentsAssignment_3; }

		//Intent
		public RuleCall getIntentsIntentParserRuleCall_3_0() { return cIntentsIntentParserRuleCall_3_0; }
	}

	public class IntentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Intent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIntentTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		private final Assignment cDecompositionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDecompositionsDecompositionParserRuleCall_3_0 = (RuleCall)cDecompositionsAssignment_3.eContents().get(0);
		
		/// *
		// * An intent has a type and consists of one or more decompositions. 
		// * / Intent:
		//	type=IntentType id=ID desc=STRING decompositions+=Decomposition+;
		public ParserRule getRule() { return rule; }

		//type=IntentType id=ID desc=STRING decompositions+=Decomposition+
		public Group getGroup() { return cGroup; }

		//type=IntentType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//IntentType
		public RuleCall getTypeIntentTypeParserRuleCall_0_0() { return cTypeIntentTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//desc=STRING
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_2_0() { return cDescSTRINGTerminalRuleCall_2_0; }

		//decompositions+=Decomposition+
		public Assignment getDecompositionsAssignment_3() { return cDecompositionsAssignment_3; }

		//Decomposition
		public RuleCall getDecompositionsDecompositionParserRuleCall_3_0() { return cDecompositionsDecompositionParserRuleCall_3_0; }
	}

	public class IntentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBasicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPurposeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrinciplesKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModelsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDesignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cImplementationKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOperationKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		/// *
		// * Intent types refer to the different levels of the canonical model.
		// * The grammar does not enforce their universal containment in a specification.
		// * A proper intention specification should contain an intent of each type in each refinement.
		// * / IntentType:
		//	"basic" | "purpose" | "principles" | "models" | "design" | "implementation" | "operation";
		public ParserRule getRule() { return rule; }

		//"basic" | "purpose" | "principles" | "models" | "design" | "implementation" | "operation"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"basic"
		public Keyword getBasicKeyword_0() { return cBasicKeyword_0; }

		//"purpose"
		public Keyword getPurposeKeyword_1() { return cPurposeKeyword_1; }

		//"principles"
		public Keyword getPrinciplesKeyword_2() { return cPrinciplesKeyword_2; }

		//"models"
		public Keyword getModelsKeyword_3() { return cModelsKeyword_3; }

		//"design"
		public Keyword getDesignKeyword_4() { return cDesignKeyword_4; }

		//"implementation"
		public Keyword getImplementationKeyword_5() { return cImplementationKeyword_5; }

		//"operation"
		public Keyword getOperationKeyword_6() { return cOperationKeyword_6; }
	}

	public class DecompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decomposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDecompositionTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDocumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDocumentsDocumentParserRuleCall_3_1_0 = (RuleCall)cDocumentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModelsModelItemParserRuleCall_4_1_0 = (RuleCall)cModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cItemsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cItemsListItemParserRuleCall_5_1_0 = (RuleCall)cItemsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		/// *
		// * A decomposition has a type and consists of one or more models, documents, or items.
		// * / Decomposition:
		//	type=DecompositionType id=ID desc=STRING ("{" documents+=Document* "}")? ("[" models+=ModelItem* "]")? ("("
		//	items+=ListItem* ")")?;
		public ParserRule getRule() { return rule; }

		//type=DecompositionType id=ID desc=STRING ("{" documents+=Document* "}")? ("[" models+=ModelItem* "]")? ("("
		//items+=ListItem* ")")?
		public Group getGroup() { return cGroup; }

		//type=DecompositionType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DecompositionType
		public RuleCall getTypeDecompositionTypeParserRuleCall_0_0() { return cTypeDecompositionTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//desc=STRING
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_2_0() { return cDescSTRINGTerminalRuleCall_2_0; }

		//("{" documents+=Document* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//documents+=Document*
		public Assignment getDocumentsAssignment_3_1() { return cDocumentsAssignment_3_1; }

		//Document
		public RuleCall getDocumentsDocumentParserRuleCall_3_1_0() { return cDocumentsDocumentParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }

		//("[" models+=ModelItem* "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//models+=ModelItem*
		public Assignment getModelsAssignment_4_1() { return cModelsAssignment_4_1; }

		//ModelItem
		public RuleCall getModelsModelItemParserRuleCall_4_1_0() { return cModelsModelItemParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//("(" items+=ListItem* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//items+=ListItem*
		public Assignment getItemsAssignment_5_1() { return cItemsAssignment_5_1; }

		//ListItem
		public RuleCall getItemsListItemParserRuleCall_5_1_0() { return cItemsListItemParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}

	public class DecompositionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecompositionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSystemKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVerificationKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//DecompositionType:
		//	"environment" | "operator" | "system" | "verification";
		public ParserRule getRule() { return rule; }

		//"environment" | "operator" | "system" | "verification"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"environment"
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//"system"
		public Keyword getSystemKeyword_2() { return cSystemKeyword_2; }

		//"verification"
		public Keyword getVerificationKeyword_3() { return cVerificationKeyword_3; }
	}

	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntriesDocItemParserRuleCall_1_0 = (RuleCall)cEntriesAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Document:
		//	"{" entries+=DocItem+ "}";
		public ParserRule getRule() { return rule; }

		//"{" entries+=DocItem+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//entries+=DocItem+
		public Assignment getEntriesAssignment_1() { return cEntriesAssignment_1; }

		//DocItem
		public RuleCall getEntriesDocItemParserRuleCall_1_0() { return cEntriesDocItemParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class DocItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocItemType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFigureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBreakKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModelKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cParagraphKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSectionKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTableKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//DocItemType:
		//	"condition" | "figure" | "break" | "model" | "paragraph" | "section" | "table";
		public ParserRule getRule() { return rule; }

		//"condition" | "figure" | "break" | "model" | "paragraph" | "section" | "table"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//"figure"
		public Keyword getFigureKeyword_1() { return cFigureKeyword_1; }

		//"break"
		public Keyword getBreakKeyword_2() { return cBreakKeyword_2; }

		//"model"
		public Keyword getModelKeyword_3() { return cModelKeyword_3; }

		//"paragraph"
		public Keyword getParagraphKeyword_4() { return cParagraphKeyword_4; }

		//"section"
		public Keyword getSectionKeyword_5() { return cSectionKeyword_5; }

		//"table"
		public Keyword getTableKeyword_6() { return cTableKeyword_6; }
	}

	public class DocItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDocItemTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefSTRINGTerminalRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DocItem:
		//	type=DocItemType id=ID ref=STRING ";";
		public ParserRule getRule() { return rule; }

		//type=DocItemType id=ID ref=STRING ";"
		public Group getGroup() { return cGroup; }

		//type=DocItemType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DocItemType
		public RuleCall getTypeDocItemTypeParserRuleCall_0_0() { return cTypeDocItemTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//ref=STRING
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//STRING
		public RuleCall getRefSTRINGTerminalRuleCall_2_0() { return cRefSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ModelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cModeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStateKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMacroKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFunctionKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInputKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ModelType:
		//	"output" | "mode" | "state" | "macro" | "function" | "input";
		public ParserRule getRule() { return rule; }

		//"output" | "mode" | "state" | "macro" | "function" | "input"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }

		//"mode"
		public Keyword getModeKeyword_1() { return cModeKeyword_1; }

		//"state"
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }

		//"macro"
		public Keyword getMacroKeyword_3() { return cMacroKeyword_3; }

		//"function"
		public Keyword getFunctionKeyword_4() { return cFunctionKeyword_4; }

		//"input"
		public Keyword getInputKeyword_5() { return cInputKeyword_5; }
	}

	public class ModelItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeModelTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModelItem:
		//	type=ModelType id=ID desc=STRING ";";
		public ParserRule getRule() { return rule; }

		//type=ModelType id=ID desc=STRING ";"
		public Group getGroup() { return cGroup; }

		//type=ModelType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ModelType
		public RuleCall getTypeModelTypeParserRuleCall_0_0() { return cTypeModelTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//desc=STRING
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_2_0() { return cDescSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ListItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListItemType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGoalKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHazardKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cConstraintKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ListItemType:
		//	"requirement" | "goal" | "hazard" | "constraint";
		public ParserRule getRule() { return rule; }

		//"requirement" | "goal" | "hazard" | "constraint"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"requirement"
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }

		//"goal"
		public Keyword getGoalKeyword_1() { return cGoalKeyword_1; }

		//"hazard"
		public Keyword getHazardKeyword_2() { return cHazardKeyword_2; }

		//"constraint"
		public Keyword getConstraintKeyword_3() { return cConstraintKeyword_3; }
	}

	public class ListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeListItemTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDocReferencesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDocReferencesDocItemCrossReference_3_1_0 = (CrossReference)cDocReferencesAssignment_3_1.eContents().get(0);
		private final RuleCall cDocReferencesDocItemIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDocReferencesDocItemCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cItemReferencesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cItemReferencesListItemCrossReference_4_1_0 = (CrossReference)cItemReferencesAssignment_4_1.eContents().get(0);
		private final RuleCall cItemReferencesListItemIDTerminalRuleCall_4_1_0_1 = (RuleCall)cItemReferencesListItemCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cModelReferencesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cModelReferencesModelItemCrossReference_5_1_0 = (CrossReference)cModelReferencesAssignment_5_1.eContents().get(0);
		private final RuleCall cModelReferencesModelItemIDTerminalRuleCall_5_1_0_1 = (RuleCall)cModelReferencesModelItemCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// *
		// * A list item has a type, description and lists of references.
		// * / / * 
		//Level0:
		//	{Level0}
		//	'{'
		//		('Program Plan' pmp=Document)?
		//		('Safety Plan' safetyPlan=Document)?
		//		('Accident Definition' accidentDefinition=Document)?
		//		('Safety Policy' safetyPolicy=Document)?
		//	'}'
		//;
		//
		//Level1:
		//	{Level1}
		//	'{'
		//		('Introduction' introduction=Document)?
		//		('Historical' historical=Document)?
		//		('Environment' environment=Document)?
		//		('Goals' '(' goals+=GoalItem* ')' )?
		//		('High-Level Requirements' '(' highLevelReqs+=RequirementItem* ')' )?
		//		('System Limitations' limitations=Document)?
		//		('Operator Requirements' '(' opReq+=RequirementItem* ')' )?
		//		('Hazard Analysis' hazardAnalysis=Document)?
		//		('Hazard List' '(' hazardList+=HazardItem* ')')?
		//		('Design Constraints' '(' constraints+=ConstraintItem* ')' )?
		//		('Verification and Validation' verification=Document)?
		//	'}'
		//;
		//
		//
		//Level2:
		//	desc=STRING
		//	'{'
		//	'}'	
		//;
		//
		//Level3:
		//	desc=STRING
		//	'{'
		//		('System Blackbox Behavior' '(' behaviors+=ModelItem* ')' )?
		//		('User Model' '(' userModels+=ModelItem* ')' )?
		//		('Verification and Validation' verification=Document )?
		//	'}'
		//;
		//
		//
		// * / ListItem:
		//	type=ListItemType id=ID desc=STRING ("{" docReferences+=[DocItem]* "}")? ("(" itemReferences+=[ListItem]* ")")? ("["
		//	modelReferences+=[ModelItem]* "]")? ";";
		public ParserRule getRule() { return rule; }

		//type=ListItemType id=ID desc=STRING ("{" docReferences+=[DocItem]* "}")? ("(" itemReferences+=[ListItem]* ")")? ("["
		//modelReferences+=[ModelItem]* "]")? ";"
		public Group getGroup() { return cGroup; }

		//type=ListItemType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ListItemType
		public RuleCall getTypeListItemTypeParserRuleCall_0_0() { return cTypeListItemTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//desc=STRING
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_2_0() { return cDescSTRINGTerminalRuleCall_2_0; }

		//("{" docReferences+=[DocItem]* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//docReferences+=[DocItem]*
		public Assignment getDocReferencesAssignment_3_1() { return cDocReferencesAssignment_3_1; }

		//[DocItem]
		public CrossReference getDocReferencesDocItemCrossReference_3_1_0() { return cDocReferencesDocItemCrossReference_3_1_0; }

		//ID
		public RuleCall getDocReferencesDocItemIDTerminalRuleCall_3_1_0_1() { return cDocReferencesDocItemIDTerminalRuleCall_3_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }

		//("(" itemReferences+=[ListItem]* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//itemReferences+=[ListItem]*
		public Assignment getItemReferencesAssignment_4_1() { return cItemReferencesAssignment_4_1; }

		//[ListItem]
		public CrossReference getItemReferencesListItemCrossReference_4_1_0() { return cItemReferencesListItemCrossReference_4_1_0; }

		//ID
		public RuleCall getItemReferencesListItemIDTerminalRuleCall_4_1_0_1() { return cItemReferencesListItemIDTerminalRuleCall_4_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//("[" modelReferences+=[ModelItem]* "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//modelReferences+=[ModelItem]*
		public Assignment getModelReferencesAssignment_5_1() { return cModelReferencesAssignment_5_1; }

		//[ModelItem]
		public CrossReference getModelReferencesModelItemCrossReference_5_1_0() { return cModelReferencesModelItemCrossReference_5_1_0; }

		//ID
		public RuleCall getModelReferencesModelItemIDTerminalRuleCall_5_1_0_1() { return cModelReferencesModelItemIDTerminalRuleCall_5_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	
	
	private SpecificationElements pSpecification;
	private RefinementElements pRefinement;
	private IntentElements pIntent;
	private IntentTypeElements pIntentType;
	private DecompositionElements pDecomposition;
	private DecompositionTypeElements pDecompositionType;
	private DocumentElements pDocument;
	private DocItemTypeElements pDocItemType;
	private DocItemElements pDocItem;
	private ModelTypeElements pModelType;
	private ModelItemElements pModelItem;
	private ListItemTypeElements pListItemType;
	private ListItemElements pListItem;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IntentSpecificationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.certware.intent.IntentSpecification".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * An intent specification consists of one or more refinements.
	// * / Specification:
	//	"specification" id=ID refinements+=Refinement+;
	public SpecificationElements getSpecificationAccess() {
		return (pSpecification != null) ? pSpecification : (pSpecification = new SpecificationElements());
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	/// *
	// * A refinement has no type and consists of one or more intents.
	// * / Refinement:
	//	"refinement" id=ID desc=STRING intents+=Intent+;
	public RefinementElements getRefinementAccess() {
		return (pRefinement != null) ? pRefinement : (pRefinement = new RefinementElements());
	}
	
	public ParserRule getRefinementRule() {
		return getRefinementAccess().getRule();
	}

	/// *
	// * An intent has a type and consists of one or more decompositions. 
	// * / Intent:
	//	type=IntentType id=ID desc=STRING decompositions+=Decomposition+;
	public IntentElements getIntentAccess() {
		return (pIntent != null) ? pIntent : (pIntent = new IntentElements());
	}
	
	public ParserRule getIntentRule() {
		return getIntentAccess().getRule();
	}

	/// *
	// * Intent types refer to the different levels of the canonical model.
	// * The grammar does not enforce their universal containment in a specification.
	// * A proper intention specification should contain an intent of each type in each refinement.
	// * / IntentType:
	//	"basic" | "purpose" | "principles" | "models" | "design" | "implementation" | "operation";
	public IntentTypeElements getIntentTypeAccess() {
		return (pIntentType != null) ? pIntentType : (pIntentType = new IntentTypeElements());
	}
	
	public ParserRule getIntentTypeRule() {
		return getIntentTypeAccess().getRule();
	}

	/// *
	// * A decomposition has a type and consists of one or more models, documents, or items.
	// * / Decomposition:
	//	type=DecompositionType id=ID desc=STRING ("{" documents+=Document* "}")? ("[" models+=ModelItem* "]")? ("("
	//	items+=ListItem* ")")?;
	public DecompositionElements getDecompositionAccess() {
		return (pDecomposition != null) ? pDecomposition : (pDecomposition = new DecompositionElements());
	}
	
	public ParserRule getDecompositionRule() {
		return getDecompositionAccess().getRule();
	}

	//DecompositionType:
	//	"environment" | "operator" | "system" | "verification";
	public DecompositionTypeElements getDecompositionTypeAccess() {
		return (pDecompositionType != null) ? pDecompositionType : (pDecompositionType = new DecompositionTypeElements());
	}
	
	public ParserRule getDecompositionTypeRule() {
		return getDecompositionTypeAccess().getRule();
	}

	//Document:
	//	"{" entries+=DocItem+ "}";
	public DocumentElements getDocumentAccess() {
		return (pDocument != null) ? pDocument : (pDocument = new DocumentElements());
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	//DocItemType:
	//	"condition" | "figure" | "break" | "model" | "paragraph" | "section" | "table";
	public DocItemTypeElements getDocItemTypeAccess() {
		return (pDocItemType != null) ? pDocItemType : (pDocItemType = new DocItemTypeElements());
	}
	
	public ParserRule getDocItemTypeRule() {
		return getDocItemTypeAccess().getRule();
	}

	//DocItem:
	//	type=DocItemType id=ID ref=STRING ";";
	public DocItemElements getDocItemAccess() {
		return (pDocItem != null) ? pDocItem : (pDocItem = new DocItemElements());
	}
	
	public ParserRule getDocItemRule() {
		return getDocItemAccess().getRule();
	}

	//ModelType:
	//	"output" | "mode" | "state" | "macro" | "function" | "input";
	public ModelTypeElements getModelTypeAccess() {
		return (pModelType != null) ? pModelType : (pModelType = new ModelTypeElements());
	}
	
	public ParserRule getModelTypeRule() {
		return getModelTypeAccess().getRule();
	}

	//ModelItem:
	//	type=ModelType id=ID desc=STRING ";";
	public ModelItemElements getModelItemAccess() {
		return (pModelItem != null) ? pModelItem : (pModelItem = new ModelItemElements());
	}
	
	public ParserRule getModelItemRule() {
		return getModelItemAccess().getRule();
	}

	//ListItemType:
	//	"requirement" | "goal" | "hazard" | "constraint";
	public ListItemTypeElements getListItemTypeAccess() {
		return (pListItemType != null) ? pListItemType : (pListItemType = new ListItemTypeElements());
	}
	
	public ParserRule getListItemTypeRule() {
		return getListItemTypeAccess().getRule();
	}

	/// *
	// * A list item has a type, description and lists of references.
	// * / / * 
	//Level0:
	//	{Level0}
	//	'{'
	//		('Program Plan' pmp=Document)?
	//		('Safety Plan' safetyPlan=Document)?
	//		('Accident Definition' accidentDefinition=Document)?
	//		('Safety Policy' safetyPolicy=Document)?
	//	'}'
	//;
	//
	//Level1:
	//	{Level1}
	//	'{'
	//		('Introduction' introduction=Document)?
	//		('Historical' historical=Document)?
	//		('Environment' environment=Document)?
	//		('Goals' '(' goals+=GoalItem* ')' )?
	//		('High-Level Requirements' '(' highLevelReqs+=RequirementItem* ')' )?
	//		('System Limitations' limitations=Document)?
	//		('Operator Requirements' '(' opReq+=RequirementItem* ')' )?
	//		('Hazard Analysis' hazardAnalysis=Document)?
	//		('Hazard List' '(' hazardList+=HazardItem* ')')?
	//		('Design Constraints' '(' constraints+=ConstraintItem* ')' )?
	//		('Verification and Validation' verification=Document)?
	//	'}'
	//;
	//
	//
	//Level2:
	//	desc=STRING
	//	'{'
	//	'}'	
	//;
	//
	//Level3:
	//	desc=STRING
	//	'{'
	//		('System Blackbox Behavior' '(' behaviors+=ModelItem* ')' )?
	//		('User Model' '(' userModels+=ModelItem* ')' )?
	//		('Verification and Validation' verification=Document )?
	//	'}'
	//;
	//
	//
	// * / ListItem:
	//	type=ListItemType id=ID desc=STRING ("{" docReferences+=[DocItem]* "}")? ("(" itemReferences+=[ListItem]* ")")? ("["
	//	modelReferences+=[ModelItem]* "]")? ";";
	public ListItemElements getListItemAccess() {
		return (pListItem != null) ? pListItem : (pListItem = new ListItemElements());
	}
	
	public ParserRule getListItemRule() {
		return getListItemAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
